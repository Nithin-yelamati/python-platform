[
  {
    "qid": "Q0001",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "Reverse a String",
    "description": "Write a Python program that reads a string from user input and returns the reversed string without using built-in reverse functions.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0002",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "Count Vowels",
    "description": "Write a Python program to count the number of vowels (a, e, i, o, u) in a given string, case-insensitive.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0003",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "Palindrome Check",
    "description": "Write a Python program to check if a given string is a palindrome (reads the same forwards and backwards), ignoring spaces and case.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0004",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "Remove Duplicate Characters",
    "description": "Write a Python program to remove duplicate characters from a string while maintaining the original order.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0005",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "String Length",
    "description": "Write a Python program to find the length of a string without using the len() function.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0006",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "Character Frequency",
    "description": "Write a Python program to count the frequency of each character in a string.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0007",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "First Non-Repeating Character",
    "description": "Write a Python program to find the first non-repeating character in a string.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0008",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "String Concatenation",
    "description": "Write a Python program to concatenate two strings without using the + operator.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0009",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "Check Substring",
    "description": "Write a Python program to check if one string is a substring of another without using built-in find functions.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0010",
    "topic": "Strings",
    "difficulty": "Easy",
    "title": "Replace Spaces",
    "description": "Write a Python program to replace all spaces in a string with '%20'.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0011",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "Anagram Check",
    "description": "Write a Python program to check if two strings are anagrams of each other (contain the same characters in different orders).",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0012",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "Longest Substring Without Repeating",
    "description": "Find the length of the longest substring without repeating characters in a given string.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0013",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "String Compression",
    "description": "Implement a method to perform basic string compression using counts of repeated characters.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0014",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "Valid Parentheses",
    "description": "Given a string containing parentheses, determine if the parentheses are valid (properly opened and closed).",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0015",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "String to Integer",
    "description": "Implement the atoi function which converts a string to an integer, handling edge cases.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0016",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "Group Anagrams",
    "description": "Group anagrams together from a list of strings and return the grouped list.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0017",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "Longest Common Prefix",
    "description": "Find the longest common prefix string amongst an array of strings.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0018",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "Reverse Words in String",
    "description": "Reverse the order of words in a string while maintaining the word order.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0019",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "Isomorphic Strings",
    "description": "Check if two strings are isomorphic (characters can be mapped to each other).",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0020",
    "topic": "Strings",
    "difficulty": "Medium",
    "title": "Word Pattern",
    "description": "Given a pattern and a string, check if the string follows the pattern.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0021",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Longest Palindromic Substring",
    "description": "Find the longest palindromic substring in a given string.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0022",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Regular Expression Matching",
    "description": "Implement regular expression matching with support for '.' and '*'.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0023",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Minimum Window Substring",
    "description": "Find the minimum window in a string which contains all characters of another string.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0024",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Edit Distance",
    "description": "Calculate the minimum number of operations required to convert one string to another.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0025",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Wildcard Matching",
    "description": "Implement wildcard pattern matching with support for '?' and '*'.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0026",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Distinct Subsequences",
    "description": "Count the number of distinct subsequences of one string that equal another string.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0027",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Text Justification",
    "description": "Given an array of words and a width, format the text such that each line has exactly width characters.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0028",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "String Permutations",
    "description": "Generate all permutations of a given string without duplicates.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0029",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Zigzag Conversion",
    "description": "Convert a string into a zigzag pattern on a given number of rows.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0030",
    "topic": "Strings",
    "difficulty": "Hard",
    "title": "Integer to English Words",
    "description": "Convert a non-negative integer to its English words representation.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0031",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Find Maximum Element",
    "description": "Write a Python program to find the maximum element in a list without using built-in max function.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0032",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Second Largest Element",
    "description": "Find the second largest element in a list of integers.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0033",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Sum of List",
    "description": "Calculate the sum of all elements in a list without using built-in sum function.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0034",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Remove Duplicates",
    "description": "Remove duplicates from a list while maintaining the original order.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0035",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Find Missing Number",
    "description": "Find the missing number in a list containing numbers from 1 to n.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0036",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Merge Sorted Lists",
    "description": "Merge two sorted lists into one sorted list.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0037",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "List Rotation",
    "description": "Rotate a list to the left by k positions.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0038",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Find Pair with Sum",
    "description": "Find a pair of elements in a list that sum to a given target.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0039",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Reverse List",
    "description": "Reverse a list in-place without using built-in reverse function.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0040",
    "topic": "Lists",
    "difficulty": "Easy",
    "title": "Find Common Elements",
    "description": "Find common elements between two lists.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0041",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Two Sum",
    "description": "Given an array of integers, return indices of two numbers that add up to a specific target.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0042",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Three Sum",
    "description": "Find all unique triplets in the array which gives the sum of zero.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0043",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Product Except Self",
    "description": "Calculate the product of all elements in the array except the element at each index.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0044",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Maximum Subarray",
    "description": "Find the contiguous subarray with the largest sum (Kadane's algorithm).",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0045",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Merge Intervals",
    "description": "Merge all overlapping intervals in a list of intervals.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0046",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Container With Most Water",
    "description": "Find two lines that together with x-axis form a container with most water.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0047",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Search in Rotated Array",
    "description": "Search for a target value in a rotated sorted array.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0048",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Find Peak Element",
    "description": "Find a peak element in an array (element greater than its neighbors).",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0049",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Spiral Matrix",
    "description": "Return all elements of a matrix in spiral order.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0050",
    "topic": "Lists",
    "difficulty": "Medium",
    "title": "Set Matrix Zeroes",
    "description": "If an element in a matrix is 0, set its entire row and column to 0.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0051",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "Trapping Rain Water",
    "description": "Compute how much water can be trapped after raining between elevation bars.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0052",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "Median of Two Sorted Arrays",
    "description": "Find the median of two sorted arrays of different sizes.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0053",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "Sliding Window Maximum",
    "description": "Find the maximum element in each sliding window of size k.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0054",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "First Missing Positive",
    "description": "Find the smallest missing positive integer in an unsorted array.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0055",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "N-Queens",
    "description": "Place n queens on an n×n chessboard so that no two queens attack each other.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0056",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "Sudoku Solver",
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0057",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "Word Search",
    "description": "Given a 2D board and a word, find if the word exists in the grid.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0058",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "Largest Rectangle in Histogram",
    "description": "Find the largest rectangular area in a histogram.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0059",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "Count Inversions",
    "description": "Count the number of inversions in an array (using merge sort).",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0060",
    "topic": "Lists",
    "difficulty": "Hard",
    "title": "Maximum Product Subarray",
    "description": "Find the contiguous subarray within an array that has the largest product.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0061",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Word Frequency",
    "description": "Count the frequency of each word in a given string using a dictionary.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0062",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Character Count",
    "description": "Count occurrences of each character in a string using dictionary.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0063",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Two Sum with Dictionary",
    "description": "Solve Two Sum problem using dictionary for O(n) time complexity.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0064",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Merge Dictionaries",
    "description": "Merge two dictionaries into one in Python.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0065",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Dictionary Key Check",
    "description": "Check if a key exists in a dictionary and handle KeyError.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0066",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Sort Dictionary by Value",
    "description": "Sort a dictionary by its values in ascending or descending order.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0067",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Dictionary Comprehension",
    "description": "Create a dictionary using dictionary comprehension with specific conditions.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0068",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Nested Dictionary Access",
    "description": "Safely access and modify values in nested dictionaries.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0069",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Dictionary to JSON",
    "description": "Convert a Python dictionary to JSON string and vice versa.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0070",
    "topic": "Dictionaries",
    "difficulty": "Easy",
    "title": "Default Dictionary",
    "description": "Use defaultdict to handle missing keys in dictionaries.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0071",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "LRU Cache",
    "description": "Design and implement an LRU (Least Recently Used) cache using OrderedDict.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0072",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Group Anagrams with Dict",
    "description": "Group anagrams using dictionary for efficient grouping.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0073",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Subarray Sum Equals K",
    "description": "Find the total number of continuous subarrays whose sum equals k using prefix sum.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0074",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Longest Consecutive Sequence",
    "description": "Find the longest consecutive elements sequence in an unsorted array.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0075",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Top K Frequent Elements",
    "description": "Find the k most frequent elements in an array using heap and dictionary.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0076",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Valid Sudoku",
    "description": "Determine if a Sudoku board is valid using dictionary for row, column, and box checks.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0077",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Copy List with Random Pointer",
    "description": "Deep copy a linked list where each node has a random pointer using dictionary.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0078",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Design HashMap",
    "description": "Design a HashMap without using any built-in hash table libraries.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0079",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Word Pattern II",
    "description": "Given a pattern and a string, check if the string follows the pattern using backtracking and dictionary.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0080",
    "topic": "Dictionaries",
    "difficulty": "Medium",
    "title": "Logger Rate Limiter",
    "description": "Design a logger system that streams messages with timestamp and rate limiting.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0081",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "All O`one Data Structure",
    "description": "Design a data structure that supports all operations in O(1) time.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0082",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "LFU Cache",
    "description": "Design and implement a Least Frequently Used (LFU) cache.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0083",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "Design Search Autocomplete",
    "description": "Design a search autocomplete system for a search engine.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0084",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "Word Squares",
    "description": "Given a set of words, find all word squares you can build from them.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0085",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "Palindrome Pairs",
    "description": "Given a list of unique words, find all pairs of distinct indices that form palindromes.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0086",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "Max Points on a Line",
    "description": "Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0087",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "Substring with Concatenation",
    "description": "Find all starting indices of substring(s) that is a concatenation of each word in a given list.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0088",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "Minimum Window Substring with Dict",
    "description": "Solve minimum window substring problem using dictionary for character counting.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0089",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "Word Break II",
    "description": "Given a string and a dictionary, add spaces in the string to construct sentences.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0090",
    "topic": "Dictionaries",
    "difficulty": "Hard",
    "title": "Alien Dictionary",
    "description": "Given a sorted dictionary of an alien language, find order of characters in the language.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0091",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Factorial",
    "description": "Calculate factorial of a non-negative integer using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0092",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Fibonacci Sequence",
    "description": "Generate the nth Fibonacci number using recursion with memoization.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0093",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Sum of Digits",
    "description": "Calculate the sum of digits of a number using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0094",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Power Calculation",
    "description": "Calculate x raised to the power n using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0095",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "GCD using Recursion",
    "description": "Find Greatest Common Divisor of two numbers using Euclidean algorithm and recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0096",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Reverse String Recursively",
    "description": "Reverse a string using recursion without using loops or built-in functions.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0097",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Palindrome Check Recursive",
    "description": "Check if a string is palindrome using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0098",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Count Down Recursively",
    "description": "Print numbers from n to 1 using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0099",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Array Sum Recursive",
    "description": "Calculate sum of all elements in an array using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0100",
    "topic": "Recursion",
    "difficulty": "Easy",
    "title": "Binary Search Recursive",
    "description": "Implement binary search algorithm using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0101",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Tower of Hanoi",
    "description": "Solve the Tower of Hanoi problem using recursion with n disks.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0102",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Permutations",
    "description": "Generate all permutations of a given string or array using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0103",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Combinations",
    "description": "Generate all combinations of k elements from n elements using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0104",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Subsets",
    "description": "Generate all possible subsets of a set using recursion (power set).",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0105",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Generate Parentheses",
    "description": "Generate all valid combinations of n pairs of parentheses using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0106",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Letter Combinations of Phone",
    "description": "Given a string containing digits from 2-9, return all possible letter combinations.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0107",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Combination Sum",
    "description": "Find all unique combinations in candidates where the candidate numbers sum to target.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0108",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Word Search with Backtracking",
    "description": "Solve word search problem using recursion and backtracking.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0109",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "Sudoku Solver with Backtracking",
    "description": "Solve Sudoku puzzle using recursion and backtracking algorithm.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0110",
    "topic": "Recursion",
    "difficulty": "Medium",
    "title": "N-Queens with Backtracking",
    "description": "Solve N-Queens problem using recursion and backtracking.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0111",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Regular Expression Matching Recursive",
    "description": "Solve regular expression matching problem using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0112",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Wildcard Matching Recursive",
    "description": "Solve wildcard matching problem using recursion with memoization.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0113",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Word Break Recursive",
    "description": "Determine if a string can be segmented into space-separated sequence of dictionary words.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0114",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Edit Distance Recursive",
    "description": "Calculate minimum edit distance between two strings using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0115",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Longest Increasing Path",
    "description": "Find the longest increasing path in a matrix using recursion and memoization.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0116",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Strobogrammatic Number II",
    "description": "Find all strobogrammatic numbers of length n using recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0117",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Expression Add Operators",
    "description": "Given a string of digits and target value, add operators to get the target value.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0118",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Remove Invalid Parentheses",
    "description": "Remove the minimum number of invalid parentheses to make the input string valid.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0119",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Word Squares Backtracking",
    "description": "Solve word squares problem using backtracking and recursion.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0120",
    "topic": "Recursion",
    "difficulty": "Hard",
    "title": "Palindrome Partitioning",
    "description": "Partition a string such that every substring of the partition is a palindrome.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0121",
    "topic": "Sorting Algorithms",
    "difficulty": "Easy",
    "title": "Implement Bubble Sort",
    "description": "Write a Python function that takes a list of integers as input and sorts it in ascending order using the Bubble Sort algorithm. The function should not use any built-in Python sorting functions like `sort()` or `sorted()`.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0122",
    "topic": "Searching Algorithms",
    "difficulty": "Medium",
    "title": "Find First and Last Position of Element in Sorted Array",
    "description": "Given a sorted array of integers `nums`, find the starting and ending position of a given `target` value. If the target is not found in the array, return `[-1, -1]`. Your algorithm's runtime complexity must be in the order of $O(\\log n)$.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0123",
    "topic": "File Handling",
    "difficulty": "Hard",
    "title": "Analyze a Large Log File",
    "description": "Write a Python script that reads a large log file (e.g., >1GB) line by line, assuming it cannot fit into memory. The script must efficiently count the occurrences of different log levels (INFO, WARNING, ERROR, DEBUG) and identify the top 10 most frequent IP addresses appearing in the logs. Implement this without loading the entire file at once.",
    "constraints": "Time: 10s, Memory: 64MB",
    "solvable": true
  },
  {
    "qid": "Q0124",
    "topic": "OOP",
    "difficulty": "Easy",
    "title": "Create a Basic 'Circle' Class",
    "description": "Define a Python class named `Circle`. The class should have a constructor that accepts the radius as an argument. Implement two instance methods: `calculate_area()` which returns the area ($πr^2$) and `calculate_circumference()` which returns the circumference ($2πr$).",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0125",
    "topic": "Exception Handling",
    "difficulty": "Medium",
    "title": "Custom Exception for Data Validation",
    "description": "Create a function that processes a list of user dictionaries. Each dictionary contains 'name' and 'age'. The function should validate each user. If a user's age is less than 18, raise a custom `UnderageError`. If the 'age' key is missing or not an integer, raise a `ValueError`. The main script should call this function and gracefully handle these specific exceptions by printing informative error messages.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0126",
    "topic": "Regular Expressions",
    "difficulty": "Hard",
    "title": "HTML Tag Extractor",
    "description": "Write a Python function that accepts a string containing a snippet of HTML code. Using regular expressions, extract all unique HTML tags (e.g., 'p', 'div', 'a') along with their attributes, if any. The function should return a dictionary where keys are the tag names and values are lists of their corresponding attribute strings.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0127",
    "topic": "Algorithms",
    "difficulty": "Easy",
    "title": "FizzBuzz",
    "description": "Write a Python program that prints numbers from 1 to a given integer `n`. For multiples of three, print 'Fizz' instead of the number. For multiples of five, print 'Buzz'. For numbers which are multiples of both three and five, print 'FizzBuzz'.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0128",
    "topic": "Data Structures",
    "difficulty": "Medium",
    "title": "Implement a Queue using Two Stacks",
    "description": "Implement a `MyQueue` class that simulates a queue's behavior (FIFO - First In First Out) using only two stacks. The implemented queue should support `push` (add element to back), `pop` (remove element from front), `peek` (get the front element), and `empty` (check if queue is empty) operations.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0129",
    "topic": "Math Problems",
    "difficulty": "Hard",
    "title": "Integer to Roman",
    "description": "Write a function to convert an integer to its Roman numeral representation. The input integer is guaranteed to be within the range from 1 to 3999.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0130",
    "topic": "Dynamic Programming",
    "difficulty": "Easy",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes `n` steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? Solve this using dynamic programming.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0131",
    "topic": "Greedy Algorithms",
    "difficulty": "Medium",
    "title": "Assign Cookies",
    "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0132",
    "topic": "Backtracking",
    "difficulty": "Hard",
    "title": "Word Search II",
    "description": "Given a 2D board of characters and a list of words from a dictionary, find all words on the board. Each word must be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. An efficient solution may require using a Trie data structure.",
    "constraints": "Time: 5s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0133",
    "topic": "Sorting Algorithms",
    "difficulty": "Easy",
    "title": "Sort Array by Parity",
    "description": "Given an array of non-negative integers `A`, return an array consisting of all the even elements of `A`, followed by all the odd elements of `A`. You may return any answer array that satisfies this condition.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0134",
    "topic": "Searching Algorithms",
    "difficulty": "Medium",
    "title": "Search a 2D Matrix",
    "description": "Write an efficient algorithm that searches for a value in an `m x n` matrix. This matrix has the following properties: integers in each row are sorted from left to right, and the first integer of each row is greater than the last integer of the previous row. Return `true` if the target is found, otherwise `false`.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0135",
    "topic": "File Handling",
    "difficulty": "Hard",
    "title": "Merge Multiple CSV Files",
    "description": "You are given a directory containing multiple CSV files. Each CSV has the same columns ('ID', 'Name', 'Score'). Write a Python script to merge all these CSV files into a single output CSV file. The script should handle potential errors like missing files or malformed rows. Additionally, ensure the final merged file does not contain duplicate rows based on the 'ID' column, keeping the first occurrence.",
    "constraints": "Time: 5s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0136",
    "topic": "OOP",
    "difficulty": "Easy",
    "title": "Bank Account Class",
    "description": "Create a Python class `BankAccount` that simulates a simple bank account. It should have a constructor to set the initial balance. Implement methods for `deposit(amount)`, `withdraw(amount)`, and `get_balance()`. The withdraw method should not allow the balance to go below zero and should return `False` if the withdrawal is unsuccessful.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0137",
    "topic": "Exception Handling",
    "difficulty": "Medium",
    "title": "Safe Dictionary Value Retrieval",
    "description": "Write a function `get_nested_value(data, keys)` that safely retrieves a value from a nested dictionary. The `keys` argument is a list of keys to traverse. The function must use exception handling to gracefully manage `KeyError` if a key is not found at any level, and `TypeError` if an attempt is made to access a key on a non-dictionary value. It should return the value if found, otherwise `None`.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0138",
    "topic": "Regular Expressions",
    "difficulty": "Hard",
    "title": "Parse and Validate Phone Numbers",
    "description": "Write a Python function that takes a list of strings and uses regular expressions to find and validate US phone numbers. The function should be able to identify numbers in formats like `(123) 456-7890`, `123-456-7890`, and `123.456.7890`. It should return a new list containing only the valid phone numbers, standardized to the `(XXX) XXX-XXXX` format.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0139",
    "topic": "Algorithms",
    "difficulty": "Easy",
    "title": "Valid Anagram",
    "description": "Given two strings `s` and `t`, write a function to determine if `t` is an anagram of `s`. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  },
  {
    "qid": "Q0140",
    "topic": "Data Structures",
    "difficulty": "Medium",
    "title": "Min Stack",
    "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Implement a `MinStack` class that has: `push(x)` -- Push element x onto stack. `pop()` -- Removes the element on top of the stack. `top()` -- Get the top element. `getMin()` -- Retrieve the minimum element in the stack. Each function should operate in $O(1)$ time.",
    "constraints": "Time: 2s, Memory: 256MB",
    "solvable": true
  }
]
